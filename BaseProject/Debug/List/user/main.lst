###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         14/Sep/2022  20:55:44
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        C:\Users\lijm1\Desktop\project_test\user\main.c
#    Command line             =
#        -f C:\Users\lijm1\Desktop\project_test\Debug\Obj\user\main.o.rsp
#        (C:\Users\lijm1\Desktop\project_test\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\lijm1\Desktop\project_test\Debug\List\user -o
#        C:\Users\lijm1\Desktop\project_test\Debug\Obj\user --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "D:\IAR Systems\Embedded Workbench
#        9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\lijm1\Desktop\project_test\libraries\CMSIS\DeviceSupport\ -I
#        C:\Users\lijm1\Desktop\project_test\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\lijm1\Desktop\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\lijm1\Desktop\project_test\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\lijm1\Desktop\project_test\user\ -I
#        C:\Users\lijm1\Desktop\project_test\user\inc\ -Ol -I "D:\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\Users\lijm1\Desktop\project_test\Debug\Obj\user\main.o.d
#    Locale                   =  C
#    List file                =
#        C:\Users\lijm1\Desktop\project_test\Debug\List\user\main.lst
#    Object file              =
#        C:\Users\lijm1\Desktop\project_test\Debug\Obj\user\main.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf     
#      __size_limit           =  32768|ARM.EW.LINKER
#
###############################################################################

C:\Users\lijm1\Desktop\project_test\user\main.c
      1          #include "stm32f10x.h"
      2          #include <stdio.h>
      3          
      4          #define DOWN 0x04
      5          #define LEFT 0x08
      6          #define RIGHT 0x10
      7          #define UP 0x20
      8          

   \                                 In section .text, align 4, keep-with-next
      9          int main(void)
     10          {
   \                     main: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     11            // RCC_APB2ENR
     12            *((volatile unsigned int*) 0x40021018) &= ~0x000000FF;
   \        0x2   0x482D             LDR.N    R0,??main_0+0x4
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x0A09             LSRS     R1,R1,#+8
   \        0x8   0x0209             LSLS     R1,R1,#+8
   \        0xA   0x6001             STR      R1,[R0, #+0]
     13            *((volatile unsigned int*) 0x40021018) |= (0x3<<4);
   \        0xC   0x6801             LDR      R1,[R0, #+0]
   \        0xE   0xF051 0x0130      ORRS     R1,R1,#0x30
   \       0x12   0x6001             STR      R1,[R0, #+0]
     14              
     15            // GPIO_CRL (포트 세팅)
     16            // led
     17            *((volatile unsigned int*) 0x40011400) &= 0x00000000;
   \       0x14   0x4829             LDR.N    R0,??main_0+0x8
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x6001             STR      R1,[R0, #+0]
     18            *((volatile unsigned int*) 0x40011400) = 0x30033300;
   \       0x1C   0x4928             LDR.N    R1,??main_0+0xC
   \       0x1E   0x6001             STR      R1,[R0, #+0]
     19            
     20            // stick
     21            *((volatile unsigned int*) 0x40011000) &= 0x00000000;
   \       0x20   0x4828             LDR.N    R0,??main_0+0x10
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x6001             STR      R1,[R0, #+0]
     22            *((volatile unsigned int*) 0x40011000) = 0x00888800;
   \       0x28   0x4927             LDR.N    R1,??main_0+0x14
   \       0x2A   0x6001             STR      R1,[R0, #+0]
     23            
     24            *((volatile unsigned int*) 0x40011008) = 0x00000000;
   \       0x2C   0x4C27             LDR.N    R4,??main_0+0x18
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x6020             STR      R0,[R4, #+0]
   \       0x32   0xE00B             B.N      ??main_1
     25            
     26            while(1) {
     27              // printf("%d\n", *((volatile unsigned int*) 0x40011008) & 0x4);
     28              if(!( *((volatile unsigned int*) 0x40011008) & UP)) {
     29                // GPIO_BSRR (불 켜기)
     30                *((volatile unsigned int*) 0x40011410) &= ~0x00000004;
   \                     ??main_2: (+1)
   \       0x34   0x4826             LDR.N    R0,??main_0+0x1C
   \       0x36   0x6801             LDR      R1,[R0, #+0]
   \       0x38   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x3C   0x6001             STR      R1,[R0, #+0]
     31                *((volatile unsigned int*) 0x40011410) |= ( 0x0C );
   \       0x3E   0x6801             LDR      R1,[R0, #+0]
   \       0x40   0xF051 0x010C      ORRS     R1,R1,#0xC
   \       0x44   0x6001             STR      R1,[R0, #+0]
     32                printf("up");
   \       0x46   0xA01B             ADR.N    R0,??main_0
   \       0x48   0x.... 0x....      BL       printf
     33                // *((volatile unsigned int*) 0x40011008) &= ~0x0000FFFF;
     34              }
   \                     ??main_1: (+1)
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0x0680             LSLS     R0,R0,#+26
   \       0x50   0xD5F0             BPL.N    ??main_2
     35              else if(!( *((volatile unsigned int*) 0x40011008) & DOWN)) {
   \       0x52   0x6820             LDR      R0,[R4, #+0]
   \       0x54   0x0740             LSLS     R0,R0,#+29
   \       0x56   0xD40C             BMI.N    ??main_3
     36                // GPIO_BSRR (불 켜기)
     37                *((volatile unsigned int*) 0x40011414) &= ~0x00000004;
   \       0x58   0x481E             LDR.N    R0,??main_0+0x20
   \       0x5A   0x6801             LDR      R1,[R0, #+0]
   \       0x5C   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x60   0x6001             STR      R1,[R0, #+0]
     38                *((volatile unsigned int*) 0x40011414) |= ( 0x0C );
   \       0x62   0x6801             LDR      R1,[R0, #+0]
   \       0x64   0xF051 0x010C      ORRS     R1,R1,#0xC
   \       0x68   0x6001             STR      R1,[R0, #+0]
     39                printf("down");
   \       0x6A   0x481B             LDR.N    R0,??main_0+0x24
   \       0x6C   0x.... 0x....      BL       printf
   \       0x70   0xE7EC             B.N      ??main_1
     40                // *((volatile unsigned int*) 0x40011008) &= ~0x0000FFFF;
     41              }
     42              else if(!( *((volatile unsigned int*) 0x40011008) & RIGHT)) {
   \                     ??main_3: (+1)
   \       0x72   0x6820             LDR      R0,[R4, #+0]
   \       0x74   0x06C0             LSLS     R0,R0,#+27
   \       0x76   0xD40C             BMI.N    ??main_4
     43                // GPIO_BSRR (불 켜기)
     44                *((volatile unsigned int*) 0x40011410) &= ~0x00000004;
   \       0x78   0x4815             LDR.N    R0,??main_0+0x1C
   \       0x7A   0x6801             LDR      R1,[R0, #+0]
   \       0x7C   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x80   0x6001             STR      R1,[R0, #+0]
     45                *((volatile unsigned int*) 0x40011410) |= ( 0x90 );
   \       0x82   0x6801             LDR      R1,[R0, #+0]
   \       0x84   0xF051 0x0190      ORRS     R1,R1,#0x90
   \       0x88   0x6001             STR      R1,[R0, #+0]
     46                printf("right");
   \       0x8A   0x4814             LDR.N    R0,??main_0+0x28
   \       0x8C   0x.... 0x....      BL       printf
   \       0x90   0xE7DC             B.N      ??main_1
     47                // *((volatile unsigned int*) 0x40011008) &= ~0x0000FFFF;
     48              }
     49              else if(!( *((volatile unsigned int*) 0x40011008) & LEFT)) {
   \                     ??main_4: (+1)
   \       0x92   0x6820             LDR      R0,[R4, #+0]
   \       0x94   0x0700             LSLS     R0,R0,#+28
   \       0x96   0xD4D9             BMI.N    ??main_1
     50                // GPIO_BSRR (불 켜기)
     51                *((volatile unsigned int*) 0x40011414) &= ~0x00000004;
   \       0x98   0x480E             LDR.N    R0,??main_0+0x20
   \       0x9A   0x6801             LDR      R1,[R0, #+0]
   \       0x9C   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0xA0   0x6001             STR      R1,[R0, #+0]
     52                *((volatile unsigned int*) 0x40011414) |= ( 0x90 );
   \       0xA2   0x6801             LDR      R1,[R0, #+0]
   \       0xA4   0xF051 0x0190      ORRS     R1,R1,#0x90
   \       0xA8   0x6001             STR      R1,[R0, #+0]
     53                printf("left");
   \       0xAA   0x480D             LDR.N    R0,??main_0+0x2C
   \       0xAC   0x.... 0x....      BL       printf
   \       0xB0   0xE7CC             B.N      ??main_1
   \       0xB2   0xBF00             Nop
   \                     ??main_0:
   \       0xB4   0x75 0x70          DC8      0x75, 0x70, 0x00, 0x00

   \              0x00 0x00
   \       0xB8   0x4002'1018        DC32     0x40021018
   \       0xBC   0x4001'1400        DC32     0x40011400
   \       0xC0   0x3003'3300        DC32     0x30033300
   \       0xC4   0x4001'1000        DC32     0x40011000
   \       0xC8   0x0088'8800        DC32     0x888800
   \       0xCC   0x4001'1008        DC32     0x40011008
   \       0xD0   0x4001'1410        DC32     0x40011410
   \       0xD4   0x4001'1414        DC32     0x40011414
   \       0xD8   0x....'....        DC32     ?_1
   \       0xDC   0x....'....        DC32     ?_2
   \       0xE0   0x....'....        DC32     ?_3
     54                // *((volatile unsigned int*) 0x40011008) &= ~0x0000FFFF;
     55              }
     56            }
     57               
     58            
     59            int a;
     60            
     61            // GPIO_BRR (불 끄기)
     62            *((volatile unsigned int*) 0x40011414) &= ~0x00000004;
                   ^
Warning[Pe111]: statement is unreachable

    int a;
        ^
"C:\Users\lijm1\Desktop\project_test\user\main.c",59  Warning[Pe177]: variable
          "a" was declared but never referenced
     63            *((volatile unsigned int*) 0x40011414) |= (0x04);
     64            
     65            return 0;
     66          }

   \                                 In section .rodata, align 4
   \        0x0   0x75 0x70          DC8 "up"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x64 0x6F          DC8 "down"

   \              0x77 0x6E    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x72 0x69          DC8 "right"

   \              0x67 0x68    

   \              0x74 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x6C 0x65          DC8 "left"

   \              0x66 0x74    

   \              0x00
   \        0x5                      DS8 3

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
     228  main

 
  28 bytes in section .rodata
 228 bytes in section .text
 
 228 bytes of CODE  memory
  28 bytes of CONST memory

Errors: none
Warnings: 2
